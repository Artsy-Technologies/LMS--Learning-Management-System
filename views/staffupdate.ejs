<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grad.LMS - Update Content</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.min.js"></script>   
    <style>
        :root {
            --primary-color: #06BBCC;
            --primary-hover: #0597a6;
            --bg-light: #f8f9fa;
            --text-muted: #6c757d;
            --border-light: rgba(0,0,0,0.1);
        }

        .content-toggle {
            background: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.08);
            text-align: center;
        }

        .toggle-buttons {
            display: inline-flex;
            background: #f8f9fa;
            border-radius: 25px;
            padding: 5px;
            margin-bottom: 15px;
        }

        .toggle-btn {
            padding: 12px 30px;
            border: none;
            background: transparent;
            border-radius: 20px;
            font-weight: 600;
            transition: all 0.3s ease;
            cursor: pointer;
            color: var(--text-muted);
        }

        .toggle-btn.active {
            background: var(--primary-color);
            color: white;
            box-shadow: 0 2px 10px rgba(6,187,204,0.3);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
        }

        .navbar {
            padding-top: 1.2rem;
            padding-bottom: 1.2rem;
        }

        .navbar-brand {
            padding-top: 1.2rem;
            padding-bottom: 1.2rem;
        }

        .navbar-nav .nav-link {
            padding-top: 1.2rem;
            padding-bottom: 1.2rem;
        }

        /* Header Styles */
        .page-header {
            background: linear-gradient(135deg, var(--primary-color), #4a90e2);
            min-height: 300px;
            display: flex;
            align-items: center;
        }

        .page-header h1 {
            font-weight: 700;
            margin-bottom: 2rem;
        }

        .nav-buttons .btn {
            margin: 0 0.5rem;
            padding: 0.75rem 2rem;
            font-weight: 600;
            transition: all 0.3s ease;
            text-decoration: none;
        }

        .nav-buttons .btn.active {
            background-color: white;
            color: var(--primary-color);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

        .nav-buttons .btn:not(.active) {
            background-color: transparent;
            color: white;
            border: 2px solid white;
        }

        .nav-buttons .btn:not(.active):hover {
            background-color: white;
            color: var(--primary-color);
        }

        /* Filter Section */
        .filter-container {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
            box-shadow: 0 5px 20px rgba(0,0,0,0.08);
            border: 1px solid #e9ecef;
        }

        .search-box {
            position: relative;
        }

        .search-box input {
            padding-right: 3rem;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .content-count-badge {
            background: var(--primary-color);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .search-box input:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(6, 187, 204, 0.25);
        }

        .search-box i {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--primary-color);
            font-size: 1.1rem;
        }

        .form-select {
            border: 2px solid #e9ecef;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(6, 187, 204, 0.25);
        }

        /* Video Cards */
        .video-card, .book-card {
            background: white;
            border: none;
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            height: 100%;
            overflow: hidden;
            margin-bottom: 2rem;
        }

        .video-card:hover, .book-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
        }

        .video-card .card-body, .book-card .card-body {
            padding: 1.5rem;
            position: relative;
        }

        .date-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: var(--primary-color);
            color: white;
            padding: 0.4rem 0.8rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            z-index: 2;
        }

        /* Book specific styles */
        .book-thumbnail {
            height: 200px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 10px;
            margin-bottom: 1rem;
            margin-top: 2.5rem;
        }

        .book-thumbnail i {
            font-size: 4rem;
            color: var(--primary-color);
            opacity: 0.7;
        }

        .book-type-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
            font-weight: 600;
            border-radius: 15px;
            text-transform: uppercase;
            margin-bottom: 0.5rem;
        }

        .book-type-notebook {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }

        .book-type-textbook {
            background-color: rgba(0, 123, 255, 0.1);
            color: #007bff;
        }

        /* Thumbnail */
        .thumbnail-container {
            position: relative;
            width: 100%;
            height: 200px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 10px;
            margin-bottom: 1rem;
            margin-top: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }

        .thumbnail-container img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .thumbnail-placeholder {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: var(--text-muted);
            text-align: center;
        }

        .thumbnail-placeholder i {
            font-size: 3rem;
            margin-bottom: 0.5rem;
            opacity: 0.5;
        }

        .thumbnail-placeholder span {
            font-size: 0.9rem;
            font-weight: 500;
        }

        /* Card Content */
        .video-card .card-title, .book-card .card-title {
            color: var(--primary-color);
            margin-bottom: 1rem;
            font-weight: 700;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .video-card .card-text, .book-card .card-text {
            color: #555;
            margin-bottom: 1rem;
            line-height: 1.6;
            font-size: 0.95rem;
        }

        /* File Details */
        .file-details {
            background: rgba(6,187,204,0.05);
            padding: 1rem;
            border-radius: 10px;
            margin-bottom: 1rem;
            font-size: 0.85rem;
            border-left: 4px solid var(--primary-color);
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.5rem;
            padding: 0.2rem 0;
        }

        .detail-item:last-child {
            margin-bottom: 0;
        }

        .detail-label {
            font-weight: 600;
            color: #495057;
        }

        .detail-value {
            color: var(--text-muted);
            font-weight: 500;
        }

        /* Card Footer */
        .video-card .card-footer, .book-card .card-footer {
            background-color: #f8f9fa;
            border-top: 1px solid var(--border-light);
            padding: 1rem 1.5rem;
            margin-top: auto;
        }

        .video-actions {
            display: flex;
            gap: 0.5rem;
            justify-content: flex-end;
        }

        .btn-edit {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: white;
            font-weight: 600;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-edit:hover {
            background-color: var(--primary-hover);
            border-color: var(--primary-hover);
            color: white;
            transform: translateY(-2px);
        }

        /* Modal Styles */
        .modal-content {
            border-radius: 15px;
            border: none;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }

        .modal-header {
            background: var(--primary-color);
            color: white;
            border-radius: 15px 15px 0 0;
            padding: 1.5rem;
        }

        .modal-title {
            font-weight: 700;
        }

        .btn-close {
            filter: brightness(0) invert(1);
        }

        .modal-body {
            padding: 2rem;
        }

        .form-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 0.5rem;
        }

        .form-control, .form-control:focus {
            border-radius: 8px;
            border: 2px solid #e9ecef;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(6, 187, 204, 0.25);
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem 1rem;
            color: var(--text-muted);
        }

        .empty-state i {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

        /* Hide content containers initially */
        .content-container {
            display: none;
        }

        .content-container.active {
            display: block;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .filter-container {
                padding: 1rem;
            }
            
            .nav-buttons .btn {
                margin: 0.25rem;
                padding: 0.5rem 1rem;
                font-size: 0.9rem;
            }
            
            .video-card .card-body, .book-card .card-body {
                padding: 1rem;
            }
            
            .date-badge {
                position: static;
                display: inline-block;
                margin-bottom: 1rem;
            }
            
            .thumbnail-container, .book-thumbnail {
                margin-top: 0;
            }
        }
    </style>
</head>
<body>
    <!-- Navbar Start -->
    <nav class="navbar navbar-expand-lg bg-white navbar-light shadow sticky-top p-0">
        <a href="/" class="navbar-brand d-flex align-items-center px-4 px-lg-5">
            <h2 class="m-0" style="color: #06BBCC; font-family: 'Nunito', sans-serif;">
                <i class="fa fa-book me-3"></i>Grad.LMS
            </h2>
        </a>
        <button type="button" class="navbar-toggler me-4" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarCollapse">
            <div class="navbar-nav ms-auto p-4 p-lg-0">
            </div>
        </div>
    </nav>
    <!-- Navbar End -->

    <!-- Header Section -->
    <div class="container-fluid page-header py-5 mb-5">
        <div class="container py-5">
            <div class="row justify-content-center">
                <div class="col-lg-10 text-center">
                    <h1 class="display-3 text-white mb-4">Manage the content</h1>
                    <div class="nav-buttons d-flex justify-content-center flex-wrap mb-4">
                        <a href="/staff/update" class="btn active">
                            <i class="fas fa-edit me-2"></i>Update
                        </a>
                        <a href="/staffupload" class="btn">
                            <i class="fas fa-upload me-2"></i>Upload
                        </a>
                        <a href="/staff/view" class="btn">
                            <i class="fas fa-eye me-2"></i>View
                        </a>
                    </div>
                    <p class="text-white fs-5 mt-3 mb-0">Edit Your Course Content</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Content Toggle -->
    <div class="container">
        <div class="content-toggle">
            <div class="toggle-buttons">
                <button class="toggle-btn active" data-type="videos" onclick="switchContentType('videos')">
                    <i class="fas fa-video me-2"></i>Videos
                </button>
                <button class="toggle-btn" data-type="books" onclick="switchContentType('books')">
                    <i class="fas fa-book me-2"></i>Books
                </button>
            </div>
            <p class="text-muted mb-0">Switch between videos and books to view different types of content</p>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container py-5">
        <!-- Filter Section -->
        <div class="filter-container">
            <div class="row align-items-center">
                <div class="col-lg-6 col-md-6 mb-3 mb-md-0">
                    <div class="search-box">
                        <input type="text" class="form-control form-control-lg" id="searchInput" 
                               placeholder="Search by name...">
                        <i class="fas fa-search"></i>
                    </div>
                </div>
                <div class="col-lg-4 col-md-4 mb-3 mb-md-0">
                    <select class="form-select form-select-lg" id="sortSelect">
                        <option value="newest">Newest First</option>
                        <option value="oldest">Oldest First</option>
                        <option value="name">Name (A-Z)</option>
                    </select>
                </div>
                <div class="col-lg-2 col-md-2">
                    <div class="d-flex justify-content-end">
                        <span class="content-count-badge" id="contentCountBadge">
                            <i class="fas fa-video" id="contentCountIcon"></i>
                            <span id="contentCount">0</span> <span id="contentType">Videos</span>
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <!-- Videos Container -->
        <div class="content-container active" id="videosContainer">
            <div class="row" id="videosGrid">
                <% if (typeof videos !== 'undefined' && videos.length > 0) { %>
                    <% videos.forEach(function(video, index) { %>
                        <div class="col-xl-4 col-lg-6 col-md-6 mb-4 video-item" 
                             data-name="<%= (video.title || video.videoName || '').toLowerCase() %>"
                             data-date="<%= video.createdAt || video.uploadDate || new Date() %>"
                             data-teacher="<%= video.teacherId && video.teacherId.sname ? video.teacherId.sname : '' %>">
                            <div class="card video-card">
                                <div class="card-body">
                                    <span class="date-badge">
                                        <i class="far fa-calendar-alt me-1"></i>
                                        <%= (video.createdAt || video.uploadDate) ? new Date(video.createdAt || video.uploadDate).toLocaleDateString('en-US', { 
                                            year: 'numeric', 
                                            month: 'short', 
                                            day: 'numeric' 
                                        }) : 'N/A' %>
                                    </span>
                                    
                                    <!-- Video Thumbnail -->
                                    <div class="thumbnail-container">
                                        <% if (video.filename) { %>
                                            <video src="/uploads/<%= video.filename %>#t=0.5" 
                                                   preload="metadata" 
                                                   muted 
                                                   playsinline 
                                                   style="width: 100%; height: 100%; object-fit: cover;">
                                                Your browser does not support HTML5 video.
                                            </video>
                                        <% } else { %>
                                            <div class="thumbnail-placeholder">
                                                <i class="fas fa-play-circle"></i>
                                                <span>No Thumbnail</span>
                                            </div>
                                        <% } %>
                                    </div>
                                    
                                    <h5 class="card-title">
                                        <i class="fas fa-play-circle"></i>
                                        <%= video.title || video.videoName || 'Untitled Video' %>
                                    </h5>
                                    
                                    <p class="card-text">
                                        <%= video.description || video.videoDescription || 'No description available.' %>
                                    </p>
                                    
                                    <% if (video.teacherId && video.teacherId.sname) { %>
                                        <p class="text-muted small mb-2">
                                            <i class="fas fa-user me-1"></i>
                                            By: <strong><%= video.teacherId.sname %></strong>
                                        </p>
                                    <% } %>
                                    
                                    <!-- File Details -->
                                    <div class="file-details">
                                        <div class="detail-item">
                                            <span class="detail-label">Format:</span>
                                            <span class="detail-value">
                                                <%= video.filename ? video.filename.split('.').pop().toUpperCase() : 'N/A' %>
                                            </span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Duration:</span>
                                            <span class="detail-value" id="duration-<%= video._id %>">
                                                <% if (video.duration) { %>
                                                    <%= Math.floor(video.duration / 60) %>:<%= String(Math.floor(video.duration % 60)).padStart(2, '0') %> min
                                                <% } else { %>
                                                    <i class="fas fa-spinner fa-spin"></i> Loading...
                                                <% } %>
                                            </span>
                                        </div>
                                        <!-- <div class="detail-item">
                                            <span class="detail-label">File Size:</span>
                                            <span class="detail-value" id="filesize-<%= video._id %>">
                                                <% if (video.fileSize) { %>
                                                    <%= (video.fileSize / (1024 * 1024)).toFixed(2) %> MB
                                                <% } else { %>
                                                    <i class="fas fa-spinner fa-spin"></i> Loading...
                                                <% } %>
                                            </span>
                                        </div> -->
                                        <div class="detail-item">
                                            <span class="detail-label">Resolution:</span>
                                            <span class="detail-value" id="resolution-<%= video._id %>">
                                                <% if (video.resolution) { %>
                                                    <%= video.resolution %>
                                                <% } else { %>
                                                    <i class="fas fa-spinner fa-spin"></i> Loading...
                                                <% } %>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="video-actions">
                                        <button class="btn btn-edit btn-sm me-2" 
                                                data-video-id="<%= video._id %>"
                                                data-video-name="<%= (video.title || video.videoName || '').replace(/"/g, '&quot;') %>"
                                                data-video-description="<%= (video.description || video.videoDescription || '').replace(/"/g, '&quot;') %>"
                                                onclick="openEditVideoModal(this)">
                                            <i class="fas fa-edit me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-danger btn-sm" 
                                                data-video-id="<%= video._id %>"
                                                data-video-name="<%= (video.title || video.videoName || '').replace(/"/g, '&quot;') %>"
                                                data-filename="<%= video.filename %>"
                                                onclick="confirmDeleteVideo(this)">
                                            <i class="fas fa-trash me-1"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="col-12">
                        <div class="empty-state">
                            <i class="fas fa-video-slash"></i>
                            <h4>No Videos Found</h4>
                            <p>No videos have been uploaded yet. Upload some videos to get started.</p>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Books Container -->
        <div class="content-container" id="booksContainer">
            <div class="row" id="booksGrid">
                <% if (typeof books !== 'undefined' && books.length > 0) { %>
                    <% books.forEach(function(book, index) { %>
                        <div class="col-xl-4 col-lg-6 col-md-6 mb-4 book-item" 
                             data-name="<%= (book.title || '').toLowerCase() %>"
                             data-date="<%= book.createdAt || book.uploadDate || new Date() %>"
                             data-author="<%= (book.author || '').toLowerCase() %>"
                             data-subject="<%= (book.subject || '').toLowerCase() %>">
                            <div class="card book-card">
                                <div class="card-body">
                                    <span class="date-badge">
                                        <i class="far fa-calendar-alt me-1"></i>
                                        <%= (book.createdAt || book.uploadDate) ? new Date(book.createdAt || book.uploadDate).toLocaleDateString('en-US', { 
                                            year: 'numeric', 
                                            month: 'short', 
                                            day: 'numeric' 
                                        }) : 'N/A' %>
                                    </span>
                                    
                                    <div class="book-thumbnail">
                                        <i class="fas fa-file-pdf"></i>
                                    </div>
                                    
                                    <% if (book.type) { %>
                                    <div class="book-type-badge <%= book.type === 'notebook' ? 'book-type-notebook' : 'book-type-textbook' %>">
                                        <%= book.type %>
                                    </div>
                                    <% } %>
                                    
                                    <h5 class="card-title">
                                        <i class="fas fa-book"></i>
                                        <%= book.title || 'Untitled Book' %>
                                    </h5>
                                    
                                    <p class="card-text">
                                        <%= book.description || 'No description available.' %>
                                    </p>
                                    
                                    <div class="file-details">
                                        <% if (book.author) { %>
                                        <div class="detail-item">
                                            <span class="detail-label">Author:</span>
                                            <span class="detail-value"><%= book.author %></span>
                                        </div>
                                        <% } %>
                                        <% if (book.subject) { %>
                                        <div class="detail-item">
                                            <span class="detail-label">Subject:</span>
                                            <span class="detail-value"><%= book.subject %></span>
                                        </div>
                                        <% } %>
                                        <% if (book.type) { %>
                                        <div class="detail-item">
                                            <span class="detail-label">Type:</span>
                                            <span class="detail-value"><%= book.type %></span>
                                        </div>
                                        <% } %>
                                        <!-- <div class="detail-item">
                                            <span class="detail-label">File Size:</span>
                                            <span class="detail-value" id="book-filesize-<%= book._id %>">
                                                <% if (book.fileSize) { %>
                                                    <%= (book.fileSize / (1024 * 1024)).toFixed(2) %> MB
                                                <% } else { %>
                                                    <i class="fas fa-spinner fa-spin"></i> Loading...
                                                <% } %>
                                            </span>
                                        </div> -->
                                        <div class="detail-item">
                                            <span class="detail-label">Pages:</span>
                                            <span class="detail-value" id="book-pages-<%= book._id %>">
                                                <% if (book.pageCount) { %>
                                                    <%= book.pageCount %> pages
                                                <% } else { %>
                                                    <i class="fas fa-spinner fa-spin"></i> Loading...
                                                <% } %>
                                            </span>
                                        </div>
                                        <div class="detail-item">
                                            <span class="detail-label">Format:</span>
                                            <span class="detail-value">
                                                <%= book.filename ? book.filename.split('.').pop().toUpperCase() : 'PDF' %>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <div class="video-actions">
                                        <button class="btn btn-edit btn-sm me-2" 
                                                data-book-id="<%= book._id %>"
                                                data-book-title="<%= (book.title || '').replace(/"/g, '&quot;') %>"
                                                data-book-description="<%= (book.description || '').replace(/"/g, '&quot;') %>"
                                                data-book-author="<%= (book.author || '').replace(/"/g, '&quot;') %>"
                                                data-book-subject="<%= (book.subject || '').replace(/"/g, '&quot;') %>"
                                                data-book-type="<%= book.type || '' %>"
                                                onclick="openEditBookModal(this)">
                                            <i class="fas fa-edit me-1"></i> Edit
                                        </button>
                                        <button class="btn btn-danger btn-sm" 
                                                data-book-id="<%= book._id %>"
                                                data-book-title="<%= (book.title || '').replace(/"/g, '&quot;') %>"
                                                data-filename="<%= book.filename %>"
                                                onclick="confirmDeleteBook(this)">
                                            <i class="fas fa-trash me-1"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="col-12">
                        <div class="empty-state">
                            <i class="fas fa-book-open"></i>
                            <h4>No Books Found</h4>
                            <p>No books have been uploaded yet. Upload some books to get started.</p>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Edit Video Modal -->
    <div class="modal fade" id="editVideoModal" tabindex="-1" aria-labelledby="editVideoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editVideoModalLabel">
                        <i class="fas fa-edit me-2"></i>Edit Video Details
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editVideoForm">
                        <input type="hidden" id="videoId" name="videoId">
                        
                        <div class="mb-3">
                            <label for="editVideoName" class="form-label">
                                <i class="fas fa-play-circle me-1"></i>Video Title *
                            </label>
                            <input type="text" class="form-control" id="editVideoName" name="videoName" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="editVideoDescription" class="form-label">
                                <i class="fas fa-align-left me-1"></i>Video Description *
                            </label>
                            <textarea class="form-control" id="editVideoDescription" name="videoDescription" rows="4" required></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" onclick="updateVideo()">
                        <i class="fas fa-save me-1"></i>Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Book Modal -->
    <div class="modal fade" id="editBookModal" tabindex="-1" aria-labelledby="editBookModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editBookModalLabel">
                        <i class="fas fa-edit me-2"></i>Edit Book Details
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editBookForm">
                        <input type="hidden" id="bookId" name="bookId">
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editBookTitle" class="form-label">
                                    <i class="fas fa-book me-1"></i>Book Title *
                                </label>
                                <input type="text" class="form-control" id="editBookTitle" name="title" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editBookAuthor" class="form-label">
                                    <i class="fas fa-user me-1"></i>Author *
                                </label>
                                <input type="text" class="form-control" id="editBookAuthor" name="author" required>
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="editBookSubject" class="form-label">
                                    <i class="fas fa-graduation-cap me-1"></i>Subject *
                                </label>
                                <input type="text" class="form-control" id="editBookSubject" name="subject" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="editBookType" class="form-label">
                                    <i class="fas fa-bookmark me-1"></i>Book Type *
                                </label>
                                <select class="form-select" id="editBookType" name="type" required>
                                    <option value="">Select book type</option>
                                    <option value="notebook">Notebook</option>
                                    <option value="textbook">Textbook</option>
                                </select>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="editBookDescription" class="form-label">
                                <i class="fas fa-align-left me-1"></i>Book Description *
                            </label>
                            <textarea class="form-control" id="editBookDescription" name="description" rows="4" required></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-primary" onclick="updateBook()">
                        <i class="fas fa-save me-1"></i>Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Video Modal -->
    <div class="modal fade" id="deleteVideoModal" tabindex="-1" aria-labelledby="deleteVideoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteVideoModalLabel">
                        <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete Video
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This action is irreversible and cannot be undone!
                    </div>
                    
                    <p class="mb-3">You are about to permanently delete the following video:</p>
                    
                    <div class="card border-danger">
                        <div class="card-body">
                            <h6 class="card-title text-danger" id="deleteVideoName">Video Name</h6>
                            <p class="card-text text-muted small">
                                <i class="fas fa-file me-1"></i>
                                File: <span id="deleteVideoFileName">filename.mp4</span>
                            </p>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <h6 class="text-danger">This will permanently:</h6>
                        <ul class="text-muted">
                            <li>Remove the video from the database</li>
                            <li>Delete the video file from the server</li>
                            <li>Remove all associated metadata</li>
                            <li>Make the video inaccessible to all users</li>
                        </ul>
                    </div>
                    
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="confirmDeleteVideo">
                        <label class="form-check-label text-danger" for="confirmDeleteVideo">
                            <strong>I understand this action cannot be reversed</strong>
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteVideoBtn" onclick="deleteVideo()" disabled>
                        <i class="fas fa-trash me-1"></i>Delete Permanently
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Book Modal -->
    <div class="modal fade" id="deleteBookModal" tabindex="-1" aria-labelledby="deleteBookModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteBookModalLabel">
                        <i class="fas fa-exclamation-triangle me-2"></i>Confirm Delete Book
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-danger" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> This action is irreversible and cannot be undone!
                    </div>
                    
                    <p class="mb-3">You are about to permanently delete the following book:</p>
                    
                    <div class="card border-danger">
                        <div class="card-body">
                            <h6 class="card-title text-danger" id="deleteBookTitle">Book Title</h6>
                            <p class="card-text text-muted small">
                                <i class="fas fa-file me-1"></i>
                                File: <span id="deleteBookFileName">filename.pdf</span>
                            </p>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <h6 class="text-danger">This will permanently:</h6>
                        <ul class="text-muted">
                            <li>Remove the book from the database</li>
                            <li>Delete the PDF file from the server</li>
                            <li>Remove all associated metadata</li>
                            <li>Make the book inaccessible to all users</li>
                        </ul>
                    </div>
                    
                    <div class="form-check mt-3">
                        <input class="form-check-input" type="checkbox" id="confirmDeleteBook">
                        <label class="form-check-label text-danger" for="confirmDeleteBook">
                            <strong>I understand this action cannot be reversed</strong>
                        </label>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-1"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBookBtn" onclick="deleteBook()" disabled>
                        <i class="fas fa-trash me-1"></i>Delete Permanently
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.10.377/pdf.worker.min.js';

// Initialize variables
let currentBookId = null;
let pdfModal = null; // Will be initialized later
let currentPdfDoc = null;
        let currentContentType = 'videos';

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize the page
            switchContentType('videos');
            
            // Setup event listeners
            document.getElementById('searchInput').addEventListener('input', filterContent);
            document.getElementById('sortSelect').addEventListener('change', sortContent);
            
            // Load video metrics for videos that don't have them
            loadVideoMetrics();
            
            // Load book metrics for books that don't have them
            loadBookMetrics();
        });

        function switchContentType(type) {
            currentContentType = type;
            
            // Update toggle buttons
            document.querySelectorAll('.toggle-btn').forEach(btn => {
                btn.classList.remove('active');
                if (btn.dataset.type === type) {
                    btn.classList.add('active');
                }
            });
            
            // Show/hide containers
            const videosContainer = document.getElementById('videosContainer');
            const booksContainer = document.getElementById('booksContainer');
            const searchInput = document.getElementById('searchInput');
            const contentCountIcon = document.getElementById('contentCountIcon');
            const contentTypeSpan = document.getElementById('contentType');
            
            if (type === 'videos') {
                videosContainer.classList.add('active');
                booksContainer.classList.remove('active');
                searchInput.placeholder = 'Search videos by name...';
                contentCountIcon.className = 'fas fa-video';
                contentTypeSpan.textContent = 'Videos';
            } else {
                videosContainer.classList.remove('active');
                booksContainer.classList.add('active');
                searchInput.placeholder = 'Search books by title...';
                contentCountIcon.className = 'fas fa-book';
                contentTypeSpan.textContent = 'Books';
            }
            
            // Clear search and update count
            document.getElementById('searchInput').value = '';
            updateContentCount();
        }

        function updateContentCount() {
            const activeContainer = document.querySelector('.content-container.active');
            const items = activeContainer.querySelectorAll(currentContentType === 'videos' ? '.video-item' : '.book-item');
            const visibleItems = Array.from(items).filter(item => item.style.display !== 'none');
            document.getElementById('contentCount').textContent = visibleItems.length;
        }

        function filterContent() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
            const activeContainer = document.querySelector('.content-container.active');
            const items = activeContainer.querySelectorAll(currentContentType === 'videos' ? '.video-item' : '.book-item');

            items.forEach(item => {
                const name = item.dataset.name || '';
                const author = item.dataset.author || '';
                const subject = item.dataset.subject || '';
                const teacher = item.dataset.teacher || '';
                
                const matchesSearch = name.includes(searchTerm) || 
                                     author.includes(searchTerm) || 
                                     subject.includes(searchTerm) ||
                                     teacher.includes(searchTerm);
                
                item.style.display = matchesSearch ? '' : 'none';
            });

            updateContentCount();
        }

        function sortContent() {
            const activeContainer = document.querySelector('.content-container.active');
            const grid = activeContainer.querySelector('.row');
            const sortBy = document.getElementById('sortSelect').value;
            const items = Array.from(grid.querySelectorAll(currentContentType === 'videos' ? '.video-item' : '.book-item'));

            items.sort((a, b) => {
                switch(sortBy) {
                    case 'newest':
                        const dateA = new Date(a.dataset.date || 0);
                        const dateB = new Date(b.dataset.date || 0);
                        return dateB - dateA;
                    case 'oldest':
                        const dateA2 = new Date(a.dataset.date || 0);
                        const dateB2 = new Date(b.dataset.date || 0);
                        return dateA2 - dateB2;
                    case 'name':
                        return (a.dataset.name || '').localeCompare(b.dataset.name || '');
                    default:
                        return 0;
                }
            });

            items.forEach(item => grid.appendChild(item));
        }

        // Video-specific functions
        function openEditVideoModal(button) {
            const videoId = button.dataset.videoId;
            const videoName = button.dataset.videoName || '';
            const videoDescription = button.dataset.videoDescription || '';
            
            document.getElementById('videoId').value = videoId;
            document.getElementById('editVideoName').value = videoName;
            document.getElementById('editVideoDescription').value = videoDescription;
            
            const modal = new bootstrap.Modal(document.getElementById('editVideoModal'));
            modal.show();
        }

        function updateVideo() {
            const videoId = document.getElementById('videoId').value;
            const videoName = document.getElementById('editVideoName').value.trim();
            const videoDescription = document.getElementById('editVideoDescription').value.trim();

            if (!videoName || !videoDescription) {
                alert('Please fill in all required fields.');
                return;
            }

            const saveBtn = document.querySelector('#editVideoModal .btn-primary');
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Saving...';
            saveBtn.disabled = true;

            fetch(`/staff/update/${videoId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    videoName: videoName, 
                    videoDescription: videoDescription,
                    title: videoName,
                    description: videoDescription
                }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Video updated successfully!');
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editVideoModal'));
                    modal.hide();
                    location.reload(); // Reload to show updated data
                } else {
                    throw new Error(data.message || 'Update failed');
                }
            })
            .catch(error => {
                alert('Error updating video: ' + error.message);
            })
            .finally(() => {
                saveBtn.innerHTML = originalText;
                saveBtn.disabled = false;
            });
        }

        // Video Metrics Loading Functions
        function loadVideoMetrics() {
            const videoItems = document.querySelectorAll('.video-item');
            
            videoItems.forEach(item => {
                const videoElement = item.querySelector('video');
                if (videoElement) {
                    const videoId = item.querySelector('[data-video-id]').dataset.videoId;
                    const filename = videoElement.src.split('/').pop().split('#')[0];
                    
                    // Load video metadata when video is loaded
                    videoElement.addEventListener('loadedmetadata', function() {
                        updateVideoMetrics(videoId, this);
                    });
                    
                    // Trigger load if not already loaded
                    if (videoElement.readyState >= 1) {
                        updateVideoMetrics(videoId, videoElement);
                    }
                    
                    // Fetch file size from server
                    fetchVideoFileSize(videoId, filename);
                }
            });
        }

        function updateVideoMetrics(videoId, videoElement) {
            // Update duration
            const durationElement = document.getElementById(`duration-${videoId}`);
            if (durationElement && videoElement.duration) {
                const duration = Math.floor(videoElement.duration);
                const minutes = Math.floor(duration / 60);
                const seconds = String(duration % 60).padStart(2, '0');
                durationElement.innerHTML = `${minutes}:${seconds} min`;
            }
            
            // Update resolution
            const resolutionElement = document.getElementById(`resolution-${videoId}`);
            if (resolutionElement && videoElement.videoWidth && videoElement.videoHeight) {
                const width = videoElement.videoWidth;
                const height = videoElement.videoHeight;
                let quality = getVideoQuality(width, height);
                resolutionElement.innerHTML = `${width}x${height} (${quality})`;
            }
        }

        function fetchVideoFileSize(videoId, filename) {
            fetch(`/api/video-filesize/${encodeURIComponent(filename)}`)
                .then(response => response.json())
                .then(data => {
                    const filesizeElement = document.getElementById(`filesize-${videoId}`);
                    if (filesizeElement && data.success) {
                        const sizeMB = (data.fileSize / (1024 * 1024)).toFixed(2);
                        filesizeElement.innerHTML = `${sizeMB} MB`;
                    } else if (filesizeElement) {
                        filesizeElement.innerHTML = 'N/A';
                    }
                })
                .catch(error => {
                    console.error('Error fetching file size:', error);
                    const filesizeElement = document.getElementById(`filesize-${videoId}`);
                    if (filesizeElement) {
                        filesizeElement.innerHTML = 'N/A';
                    }
                });
        }

        function getVideoQuality(width, height) {
            if (height >= 2160) return '4K';
            if (height >= 1440) return '2K';
            if (height >= 1080) return 'Full HD';
            if (height >= 720) return 'HD';
            if (height >= 480) return 'SD';
            return 'Low';
        }

        // Book Metrics Loading Functions
        function loadBookMetrics() {
    const bookItems = document.querySelectorAll('.book-item');
    
    bookItems.forEach(item => {
        const bookId = item.querySelector('[data-book-id]').dataset.bookId;
        const filename = item.querySelector('[data-filename]').dataset.filename;
        
        if (filename) {
            fetchBookFileSize(bookId, filename);
            fetchBookPageCount(bookId, filename);
        }
    });
}
        function fetchBookFileSize(bookId, filename) {
    fetch(`/api/book-filesize/${encodeURIComponent(filename)}`)
        .then(response => response.json())
        .then(data => {
            const filesizeElement = document.getElementById(`book-filesize-${bookId}`);
            if (filesizeElement && data.success) {
                const sizeMB = (data.fileSize / (1024 * 1024)).toFixed(2);
                filesizeElement.innerHTML = `${sizeMB} MB`;
            } else if (filesizeElement) {
                filesizeElement.innerHTML = 'N/A';
            }
        })
        .catch(error => {
            console.error('Error fetching book file size:', error);
            const filesizeElement = document.getElementById(`book-filesize-${bookId}`);
            if (filesizeElement) {
                filesizeElement.innerHTML = 'N/A';
            }
        });
}

function fetchBookPageCount(bookId, filename) {
    // First try to get from server API if it exists
    fetch(`/api/book-pagecount/${encodeURIComponent(filename)}`)
        .then(response => response.json())
        .then(data => {
            const pagesElement = document.getElementById(`book-pages-${bookId}`);
            if (data.success && pagesElement) {
                pagesElement.innerHTML = `${data.pageCount} pages`;
            } else {
                // Fallback to client-side PDF parsing
                loadPdfPageCount(bookId, filename);
            }
        })
        .catch(error => {
            console.error('Server page count failed, trying client-side:', error);
            // Fallback to client-side PDF parsing
            loadPdfPageCount(bookId, filename);
        });
}

function loadPdfPageCount(bookId, filename) {
    const pagesElement = document.getElementById(`book-pages-${bookId}`);
    if (!pagesElement) return;
    
    const pdfUrl = `/uploads/${filename}`;
    
    pdfjsLib.getDocument(pdfUrl).promise.then(function(pdf) {
        pagesElement.innerHTML = `${pdf.numPages} pages`;
    }).catch(function(error) {
        console.error('Error loading PDF for page count:', error);
        pagesElement.innerHTML = 'N/A';
    });
}
function confirmDeleteVideo(button) {
            const videoId = button.dataset.videoId;
            const videoName = button.dataset.videoName || 'Unnamed Video';
            const filename = button.dataset.filename || 'Unknown file';
            
            document.getElementById('deleteVideoName').textContent = videoName;
            document.getElementById('deleteVideoFileName').textContent = filename;
            document.getElementById('deleteVideoModal').dataset.videoId = videoId;
            
            const confirmCheckbox = document.getElementById('confirmDeleteVideo');
            const deleteBtn = document.getElementById('confirmDeleteVideoBtn');
            confirmCheckbox.checked = false;
            deleteBtn.disabled = true;
            
            confirmCheckbox.addEventListener('change', function() {
                deleteBtn.disabled = !this.checked;
            });
            
            const modal = new bootstrap.Modal(document.getElementById('deleteVideoModal'));
            modal.show();
        }

        function deleteVideo() {
            const modal = document.getElementById('deleteVideoModal');
            const videoId = modal.dataset.videoId;
            
            const deleteBtn = document.getElementById('confirmDeleteVideoBtn');
            const originalText = deleteBtn.innerHTML;
            deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Deleting...';
            deleteBtn.disabled = true;
            
            fetch(`/staff/delete/${videoId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Video deleted successfully!');
                    const modalInstance = bootstrap.Modal.getInstance(modal);
                    modalInstance.hide();
                    location.reload(); // Reload to show updated data
                } else {
                    throw new Error(data.message || 'Delete failed');
                }
            })
            .catch(error => {
                alert('Error deleting video: ' + error.message);
            })
            .finally(() => {
                deleteBtn.innerHTML = originalText;
                deleteBtn.disabled = false;
            });
        }
        


        // Book-specific functions
        function openEditBookModal(button) {
            const bookId = button.dataset.bookId;
            const bookTitle = button.dataset.bookTitle || '';
            const bookDescription = button.dataset.bookDescription || '';
            const bookAuthor = button.dataset.bookAuthor || '';
            const bookSubject = button.dataset.bookSubject || '';
            const bookType = button.dataset.bookType || '';
            
            document.getElementById('bookId').value = bookId;
            document.getElementById('editBookTitle').value = bookTitle;
            document.getElementById('editBookDescription').value = bookDescription;
            document.getElementById('editBookAuthor').value = bookAuthor;
            document.getElementById('editBookSubject').value = bookSubject;
            document.getElementById('editBookType').value = bookType;
            
            const modal = new bootstrap.Modal(document.getElementById('editBookModal'));
            modal.show();
        }

        function updateBook() {
            const bookId = document.getElementById('bookId').value;
            const title = document.getElementById('editBookTitle').value.trim();
            const description = document.getElementById('editBookDescription').value.trim();
            const author = document.getElementById('editBookAuthor').value.trim();
            const subject = document.getElementById('editBookSubject').value.trim();
            const type = document.getElementById('editBookType').value;

            if (!title || !description || !author || !subject || !type) {
                alert('Please fill in all required fields.');
                return;
            }

            const saveBtn = document.querySelector('#editBookModal .btn-primary');
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Saving...';
            saveBtn.disabled = true;

            fetch(`/staff/update-book/${bookId}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title, description, author, subject, type }),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Book updated successfully!');
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editBookModal'));
                    modal.hide();
                    location.reload(); // Reload to show updated data
                } else {
                    throw new Error(data.message || 'Update failed');
                }
            })
            .catch(error => {
                alert('Error updating book: ' + error.message);
            })
            .finally(() => {
                saveBtn.innerHTML = originalText;
                saveBtn.disabled = false;
            });
        }

        function confirmDeleteBook(button) {
            const bookId = button.dataset.bookId;
            const bookTitle = button.dataset.bookTitle || 'Unnamed Book';
            const filename = button.dataset.filename || 'Unknown file';
            
            document.getElementById('deleteBookTitle').textContent = bookTitle;
            document.getElementById('deleteBookFileName').textContent = filename;
            document.getElementById('deleteBookModal').dataset.bookId = bookId;
            
            const confirmCheckbox = document.getElementById('confirmDeleteBook');
            const deleteBtn = document.getElementById('confirmDeleteBookBtn');
            confirmCheckbox.checked = false;
            deleteBtn.disabled = true;
            
            confirmCheckbox.addEventListener('change', function() {
                deleteBtn.disabled = !this.checked;
            });
            
            const modal = new bootstrap.Modal(document.getElementById('deleteBookModal'));
            modal.show();
        }

        function deleteBook() {
            const modal = document.getElementById('deleteBookModal');
            const bookId = modal.dataset.bookId;
            
            const deleteBtn = document.getElementById('confirmDeleteBookBtn');
            const originalText = deleteBtn.innerHTML;
            deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>Deleting...';
            deleteBtn.disabled = true;
            
            fetch(`/staff/delete-book/${bookId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Book deleted successfully!');
                    const modalInstance = bootstrap.Modal.getInstance(modal);
                    modalInstance.hide();
                    location.reload(); // Reload to show updated data
                } else {
                    throw new Error(data.message || 'Delete failed');
                }
            })
            .catch(error => {
                alert('Error deleting book: ' + error.message);
            })
            .finally(() => {
                deleteBtn.innerHTML = originalText;
                deleteBtn.disabled = false;
            });
        }
    </script>
</body>
</html>